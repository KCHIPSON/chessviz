#include <fstream>
#include <iostream>
#include <regex>
#include <string>
using namespace std;

int i = 1;
int check_str(string str)
{
    // Проверка на входные значения
    //[ТипФигуры] Поле ТипХода Поле [ТипФигуры | 'e.p.'| Рокировка | '+' | '#']

    if (!regex_match(
                str,
                // clang-format off
                regex("^[0-9]+\\. "
                      "(((([RNBQK]{0,1}[a-h][1-8][-x][a-h][1-8](e.p.|[RNBQK]){0,1})|O-O-O|O-O)[+]{0,1} (([RNBQK]{0,1}[a-h][1-8][-x][a-h][1-8](e.p.|[RNBQK]){0,1})|O-O-O|O-O)[+#]{0,1})|((([RNBQK]{0,1}[a-h][1-8][-x][a-h][1-8](e.p.|[RNBQK]){0,1})|O-O-O|O-O)[#]{0,1}))")
               //clang-format on
                ))          
    {
        cout 
             << "\x1b[1;31mПроверьте правильность введенного хода в "
                "строке \x1b[0m\"" << str << "\"\x1b[1;31m"
             <<  endl<<"Запись хода должна осуществляться следующим бразом:\x1b[0m"<<endl
             <<"\x1b[1;34m"
             <<"<№ Хода>. <Ход> <Ход>"<<endl<<endl
             <<"\x1b[1;35m"
             <<" Ход = [ТипФигуры] Поле ТипХода Поле [ТипФигуры | 'e.p.' | '+' | '#'] | Рокировка"<<endl
             <<" ТипФигуры = 'K' | 'Q' | 'R' | 'B' | 'N'"<<endl
             <<" Поле = /[a-h][1-8]/"<<endl
             <<" ТипХода = '-' | 'x'"<<endl
             <<" Рокировка = '0-0-0' | '0-0'"<<endl                        
             <<"\x1b[0m" << endl;
        return 1;
    }
    
    //Проверка на номер
    if (!regex_match(str, regex("^" + to_string(i) + "+\\. .+"))) {
        cout
             << "\x1b[1;31mПроверьте правильность введенного номера хода в "
                "строке \x1b[0m\"" << str << "\"\x1b[1;31m , номер хода должен быть равен "
             << i << " и после него должен стоять пробел!\x1b[0m" << endl;
        return 1;
    }
    i++;

    //Проверка взятия на проходе
    if ((regex_match(str, regex(".+ ((.+-.+e\\.p\\.)|([RNBQK].+e\\.p\\.)).* .*"))) ||(regex_match(str, regex(".+ .+ ((.+-.+e\\.p\\.)|([RNBQK].+e\\.p\\.)).*"))))
    {
        cout
             << "\x1b[1;31mПроверьте правильность введенного хода в "
                "строке \x1b[0m\"" << str << "\"\x1b[1;31m , взятие на проходе возможно только при типе хода взятие и только пешкой!\x1b[0m" << endl;
        return 1;
    }

    //Проверка превращения др фигур                       
    if ((regex_match(str, regex(".+ (([RNBQK].+[RNBQK].* )|(.+[^8][RNBQK].* )).*")))||(regex_match(str, regex(".+ .+ (([RNBQK].+[RNBQK])|(.+[^1][RNBQK])).*"))))
    {
        cout
             << "\x1b[1;31mПроверьте правильность введенного хода в "
                "строке \x1b[0m\"" << str << "\"\x1b[1;31m , превращение возможно только пешки и только при ходе на 8(для белых) или 1(для черных) клетку!\x1b[0m" << endl;
        return 1;
    }
    return 0;
}
